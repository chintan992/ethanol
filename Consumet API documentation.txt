
#Provider 9Anime(consumet API)

##Search
Technical details regarding the usage of the search function for the 9anime provider can be found below. Example code is provided for both JavaScript and Python, along with a response schema.

Route Schema (URL)
https://api.consumet.org/anime/9anime/{query}?page={number}

Path Parameters
Parameter	Type	Description	Required?	Default
query	string	The search query; i.e. the title of the item you are looking for.	Yes	""
Query Parameters
Parameter	Type	Description	Required?	Default
page	integer	The page number of results to return.	No	1
Request Samples
import axios from "axios";
 
// Using the example query "demon", and looking at the 2nd page of results.
const url = "https://api.consumet.org/anime/9anime/demon?page=2";
const data = async () => {
    try {
        const { data } = await axios.get(url, { params: { page: 2 } });
        return data;
    } catch (err) {
        throw new Error(err.message);
    }
};
 
console.log(data);

Response Schema
MIME Type: application/json

{
  "currentPage": 0,
  "hasNextPage": true,
  "results": [
    {
      "id": "string",
      "title": "string",
      "image": "string",
      "releaseDate": "string", // or null
      "subOrDub": "sub" // or "dub"
    }
  ]
}

##Get Anime Info
Technical details regarding the usage of the get anime info function for the 9anime provider can be found below. Example code is provided for both JavaScript and Python, along with a response schema.

Route Schema (URL)
https://api.consumet.org/anime/9anime/info/{id}

Path Parameters
Parameter	Type	Description	Required?	Default
id	string	The 9anime ID of the anime; i.e. provided by searching for said anime and selecting the correct one.	Yes	
Request Samples
import axios from "axios";
 
// Using the example ID of "spy-x-family.6ll19".
const url = "https://api.consumet.org/anime/9anime/info/spy-x-family.6ll19";
const data = async () => {
    try {
        const { data } = await axios.get(url, {params: {id: "spy-x-family.6ll19"}});
        return data;
    } catch (err) {
        throw new Error(err.message);
    }
};
 
console.log(data);

Response Schema
MIME Type: application/json

{
  "id": "string",
  "title": "string",
  "url": "string",
  "image": "string",
  "releaseDate": "string", // or null
  "description": "string", // or null
  "genres": [
    "string"
  ],
  "subOrDub": "sub",
  "type": "string", // or null
  "status": "Ongoing",
  "otherName": "string", // or null
  "totalEpisodes": 0,
  "episodes": [
    {
      "id": "string",
      "number": 0,
      "url": "string"
    }
  ]
}


##Get Anime Episode Streaming Links
Technical details regarding the usage of the get anime streaming links function for the 9anime provider can be found below. Example code is provided for both JavaScript and Python, along with a response schema.

Route Schema (URL)
https://api.consumet.org/anime/9anime/watch/{episodeId}?server={serverName}

Query Parameters
Parameter	Type	Description	Required?	Default
query	string	The search query; i.e. the title of the item you are looking for.	Yes	""
server	Enum: "vidcloud" "streamsb" "vidstreaming" "streamtape" "vidcloud"	The page number of results to return.	No	"vidcloud"
Request Samples
import axios from "axios";
 
/*
Using the example episode ID of '159332',
explicitly defining default server for demostrative purposes.
*/
const url = "https://api.consumet.org/anime/9anime/watch/1593321&server=vidcloud"
const data = async () => {
    try {
        const { data } = await axios.get(url, { params: {
            episodeId: "159332",
            server: "vidcloud"
        } });
        return data;
    } catch (err) {
        throw new Error(err.message);
    }
};
 
console.log(data);

Response Schema
MIME Type: application/json

{
  "headers": {
      "Referer": "string",
      "watchsb": "string", // or null, since only provided with server being equal to "streamsb".
      "User-Agent": "string" // or null
  },
  "sources": [
      {
      "url": "string",
      "quality": "string",
      "isM3U8": true
      }
  ]
}


#Provider GogoAnime(consumet API)

##Search
Technical details regarding the usage of the search function for the GogoAnime provider can be found below. Example code is provided for both JavaScript and Python, along with a response schema.

Route Schema (URL)
https://api.consumet.org/anime/gogoanime/{query}?page={number}

Path Parameters
Parameter	Type	Description	Required?	Default
query	string	The search query; i.e. the title of the item you are looking for.	Yes	""
Query Parameters
Parameter	Type	Description	Required?	Default
page	integer	The page number of results to return.	No	1
Request Samples
import axios from "axios";
 
// Using the example query "demon", and looking at the 2nd page of results.
const url = "https://api.consumet.org/anime/gogoanime/demon?page=2";
const data = async () => {
    try {
        const { data } = await axios.get(url, { params: { page: 2 } });
        return data;
    } catch (err) {
        throw new Error(err.message);
    }
};
 
console.log(data);

Response Schema
MIME Type: application/json

{
  "currentPage": 0,
  "hasNextPage": true,
  "results": [
    {
      "id": "string",
      "title": "string",
      "image": "string",
      "releaseDate": "string", // or null
      "subOrDub": "sub" // or "dub"
    }
  ]
}

##Get Recent Episodes
Technical details regarding the usage of the get recent anime episodes function for the GogoAnime provider can be found below. Example code is provided for both JavaScript and Python, along with a response schema.

Route Schema (URL)
https://api.consumet.org/anime/gogoanime/recent-episodes

Query Parameters
Parameter	Type	Description	Required?	Default
page	integer	The page number of results to return.	No	1
type	integer	The type of anime to get, i.e. sub or dub. 1: Japanese Dub, English Sub; 2: English Dub, No Sub; 3: Chinese Dub, English Sub.	No	1
Request Samples
import axios from "axios";
 
const url = "https://api.consumet.org/anime/gogoanime/recent-episodes";
const data = async () => {
    try {
        const { data } = await axios.get(url, { params: { page: 1, type: 1 } });
        return data;
    } catch (err) {
        throw new Error(err.message);
    }
};
 
console.log(data);

Response Schema
MIME Type: application/json

{
  "currentPage": 0,
  "hasNextPage": true,
  "results": [
    {
      "id": "string",
      "episodeId": "string",
      "episodeNumber": 0,
      "title": "string",
      "image": "string",
      "url": "string"
    }
  ]
}


##Get Top Airing Anime
Technical details regarding the usage of the get top airing anime function for the GogoAnime provider can be found below. Example code is provided for both JavaScript and Python, along with a response schema.

Route Schema (URL)
https://api.consumet.org/anime/gogoanime/top-airing

Query Parameters
Parameter	Type	Description	Required?	Default
page	integer	The page number of results to return.	No	1
Request Samples
import axios from "axios";
 
const url = "https://api.consumet.org/anime/gogoanime/top-airing";
const data = async () => {
    try {
        const { data } = await axios.get(url, { params: { page: 1 } });
        return data;
    } catch (err) {
        throw new Error(err.message);
    }
};
 
console.log(data);

Response Schema
MIME Type: application/json

{
  "currentPage": 0,
  "hasNextPage": true,
  "results": [
    {
      "id": "string",
      "title": "string",
      "image": "string",
      "url": "string",
      "genres": [ "string" ]
    }
  ]
}


##Get Anime Info
Technical details regarding the usage of the get anime info function for the GogoAnime provider can be found below. Example code is provided for both JavaScript and Python, along with a response schema.

Route Schema (URL)
https://api.consumet.org/anime/gogoanime/info/{id}

Path Parameters
Parameter	Type	Description	Required?	Default
id	string	The GogoAnime ID of the anime; i.e. provided by searching for said anime and selecting the correct one.	Yes	
Request Samples
import axios from "axios";
 
// Using the example ID of "spy-x-family".
const url = "https://api.consumet.org/anime/gogoanime/info/spy-x-family";
const data = async () => {
    try {
        const { data } = await axios.get(url);
        return data;
    } catch (err) {
        throw new Error(err.message);
    }
};
 
console.log(data);

Response Schema
MIME Type: application/json

{
  "id": "string",
  "title": "string",
  "url": "string",
  "image": "string",
  "releaseDate": "string", // or null
  "description": "string", // or null
  "genres": [
    "string"
  ],
  "subOrDub": "sub",
  "type": "string", // or null
  "status": "Ongoing",
  "otherName": "string", // or null
  "totalEpisodes": 0,
  "episodes": [
    {
      "id": "string",
      "number": 0,
      "url": "string"
    }
  ]
}


##Get Anime Episode Streaming Links
Technical details regarding the usage of the get anime streaming links function for the GogoAnime provider can be found below. Example code is provided for both JavaScript and Python, along with a response schema.

Route Schema (URL)
https://api.consumet.org/anime/gogoanime/watch/{episodeId}?server={serverName}

Path Parameters
Parameter	Type	Description	Required?	Default
query	string	The search query; i.e. the title of the item you are looking for.	Yes	""
Query Parameters
Parameter	Type	Description	Required?	Default
server	Enum: "gogocdn" "streamsb" "vidstreaming"	The page number of results to return.	No	"gogocdn"
Request Samples
import axios from "axios";
 
/*
Using the example episode ID of 'spy-x-family-episode-1',
explicitly defining default server for demostrative purposes.
*/
const url = "https://api.consumet.org/anime/gogoanime/watch/spy-x-family-episode-1";
const data = async () => {
    try {
        const { data } = await axios.get(url, { params: { server: "gogocdn" } });
        return data;
    } catch (err) {
        throw new Error(err.message);
    }
};
 
console.log(data);

Response Schema
MIME Type: application/json

{
  "headers": {
      "Referer": "string",
      "watchsb": "string", // or null, since only provided with server being equal to "streamsb".
      "User-Agent": "string" // or null
  },
  "sources": [
      {
      "url": "string",
      "quality": "string",
      "isM3U8": true
      }
  ]
}


##Get Anime Episode Available Servers
Technical details regarding the usage of the get available servers function for the GogoAnime provider can be found below. Example code is provided for both JavaScript and Python, along with a response schema.

Route Schema (URL)
https://api.consumet.org/anime/gogoanime/servers/{episodeId}

Path Parameters
Parameter	Type	Description	Required?	Default
query	string	The search query; i.e. the title of the item you are looking for.	Yes	""
Request Samples
import axios from "axios";
 
// Using the example episode ID of 'spy-x-family-episode-1'.
const url = "https://api.consumet.org/anime/gogoanime/servers/spy-x-family-episode-1";
const data = async () => {
    try {
        const { data } = await axios.get(url);
        return data;
    } catch (err) {
        throw new Error(err.message);
    }
};
 
console.log(data);

Response Schema
MIME Type: application/json

[
  {
      "name": "string",
      "url": "string"
  }
]


#Provider Zoro(consumet API)

##Search
Technical details regarding the usage of the search function for the zoro provider can be found below. Example code is provided for both JavaScript and Python, along with a response schema.

Route Schema (URL)
https://api.consumet.org/anime/zoro/{query}?page={number}

Path Parameters
Parameter	Type	Description	Required?	Default
query	string	The search query; i.e. the title of the item you are looking for.	Yes	""
Query Parameters
Parameter	Type	Description	Required?	Default
page	integer	The page number of results to return.	No	1
Request Samples
import axios from "axios";
 
// Using the example query "demon", and looking at the 2nd page of results.
const url = "https://api.consumet.org/anime/zoro/demon?page=2";
const data = async () => {
    try {
        const { data } = await axios.get(url, { params: { page: 2 } });
        return data;
    } catch (err) {
        throw new Error(err.message);
    }
};
 
console.log(data);

Response Schema
MIME Type: application/json

{
  "totalPages": 2,
  "currentPage": 0,
  "hasNextPage": true,
  "results": [
    {
      "id": "string",
      "title": "string",
      "image": "string",
      "releaseDate": "string", // or null
      "subOrDub": "sub" // or "dub"
    }
  ]
}


##Get Anime Info
Technical details regarding the usage of the get anime info function for the zoro provider can be found below. Example code is provided for both JavaScript and Python, along with a response schema.

Route Schema (URL)
https://api.consumet.org/anime/zoro/info?id={id}

Query Parameters
Parameter	Type	Description	Required?	Default
id	string	The zoro ID of the anime; i.e. provided by searching for said anime and selecting the correct one.	Yes	
Request Samples
import axios from "axios";
 
// Using the example ID of "spy-x-family-17977".
const url = "https://api.consumet.org/anime/zoro/info?id=spy-x-family-17977";
const data = async () => {
    try {
        const { data } = await axios.get(url, {params: {id: "spy-x-family-17977"}});
        return data;
    } catch (err) {
        throw new Error(err.message);
    }
};
 
console.log(data);

Response Schema
MIME Type: application/json

{
  "id": "string",
  "title": "string",
  "url": "string",
  "image": "string",
  "releaseDate": "string", // or null
  "description": "string", // or null
  "genres": [
    "string"
  ],
  "subOrDub": "sub",
  "type": "string", // or null
  "status": "Ongoing",
  "otherName": "string", // or null
  "totalEpisodes": 0,
  "episodes": [
    {
      "id": "string",
      "number": 0,
      "url": "string"
    }
  ]
}


##Get Anime Episode Streaming Links
Technical details regarding the usage of the get anime streaming links function for the zoro provider can be found below. Example code is provided for both JavaScript and Python, along with a response schema.

The key changes once every hour, so this may result in a little downtime when the key is changed, while our bot is updating the key.

Route Schema (URL)
https://api.consumet.org/anime/zoro/watch/{episodeId}?server={serverName}

Query Parameters
Parameter	Type	Description	Required?	Default
query	string	The search query; i.e. the title of the item you are looking for.	Yes	""
server	Enum: "vidcloud" "streamsb" "vidstreaming" "streamtape" "vidcloud"	The page number of results to return.	No	"vidcloud"
Request Samples
import axios from "axios";
 
/*
Using the example episode ID of 'spy-x-family-17977$episode$89506$both',
explicitly defining default server for demostrative purposes.
*/
const url = "https://api.consumet.org/anime/zoro/watch?episodeId=spy-x-family-17977$episode$89506$both&server=vidcloud"
const data = async () => {
    try {
        const { data } = await axios.get(url, { params: {
            episodeId: "spy-x-family-17977$episode$89506$both",
            server: "vidcloud"
        } });
        return data;
    } catch (err) {
        throw new Error(err.message);
    }
};
 
console.log(data);

Response Schema
MIME Type: application/json

{
  "headers": {
      "Referer": "string",
      "watchsb": "string", // or null, since only provided with server being equal to "streamsb".
      "User-Agent": "string" // or null
  },
  "sources": [
      {
      "url": "string",
      "quality": "string",
      "isM3U8": true
      }
  ]
}


#NPM library @consumet/extensions

The "consumet.ts" library, otherwise @consumet/extensions, is available via mainstream package managers.

Installation
Instructions for installing the library can be found below.

npm i @consumet/extensions

##Usage

ANIME
By using ANIME category you can interact with the anime providers. And get access to the anime providers methods. Which allows you to search for anime, get the anime information, get the anime episodes with streaming links.

// ESM
import { ANIME } from '@consumet/extensions';

// <providerName> is the name of the provider you want to use. list of the proivders is below.
const animeProvider = ANIME.<providerName>();
Common Methods
languages - string, the language of the current provider, return language code, example: languages: 'en'

isNSFW - bool, true if the provider provides NSFW content.

isWorking - bool, a bool to identify the state of the current provider, true if the provider is working, false otherwise.

isDubAvailableSeparately - bool, true if the provider provides dubbed content.

name - string, the name of the current provider, example: name: 'Crunchyroll'

baseUrl - string, url to the base URL of the current provider

logo - string, url to the logo image of the current provider

classPath - string,

Anime Providers List
This list is in alphabetical order.

9anime
Anify
Gogoanime
Zoro.to




#9Anime
Note: This provider has a special way of initializing

const nineanime = await ANIME.NineAnime.create();
Methods
search
fetchAnimeInfo
fetchEpisodeSources
fetchEpisodeServers
search
Note: This method is a subclass of the BaseParser class. meaning it is available across most categories.

Parameters
Parameter	Type	Description
query	string	query to search for. (In this case, We're searching for ojisan)
nineanime.search("ojisan").then(data => {
  console.log(data);
})
returns a promise which resolves into an array of anime. (Promise<ISearch<IAnimeResult[]>>)
output:

{
  currentPage: 1,
  hasNextPage: false,
  results: [
    {
      id: 'uncle-from-another-world.oj9q8',
      title: 'UNCLE FROM ANOTHER WORLD',
      url: 'https://9anime.to/watch/uncle-from-another-world.oj9q8',
      image: 'https://static.bunnycdn.ru/i/cache/images/1/1e/1e014e4ca206a486abef62cf0795c919.jpg',
      subOrSub: 'sub',
      type: 'TV'
    },
    {
      id: 'ojisan-and-marshmallow.4qo',
      title: 'Ojisan and Marshmallow',
      url: 'https://9anime.to/watch/ojisan-and-marshmallow.4qo',
      image: 'https://static.bunnycdn.ru/i/cache/images/2018/04/7794c3d41b0cd0d2c521b034fcca6b23.jpg',
      subOrSub: 'sub',
      type: 'TV'
    },
    {...}
    ...
  ]
}
fetchAnimeInfo
Parameters
Parameter	Type	Description
id	string	takes anime id as a parameter. (anime id can be found in the anime search results or anime info object)
nineanime.fetchAnimeInfo("uncle-from-another-world.oj9q8").then(data => {
  console.log(data);
})
returns a promise which resolves into an anime info object (including the episodes). (Promise<IAnimeInfo>)
output:

{
  id: 'uncle-from-another-world.oj9q8',
  title: 'UNCLE FROM ANOTHER WORLD',
  url: 'https://9anime.id/watch/uncle-from-another-world.oj9q8',
  jpTitle: 'Isekai Ojisan',
  genres: [ 'Adventure', 'Comedy', 'Fantasy', 'Isekai' ],
  image: 'https://static.bunnycdn.ru/i/cache/images/1/1e/1e014e4ca206a486abef62cf0795c919.jpg',
  description: "Seventeen years ago, Takafumi's uncle fell into a coma, but now he's back like a man...",
  type: 'TV',
  studios: [ { id: 'atelierpontdarc', title: 'AtelierPontdarc' } ],
  releaseDate: 'Jul 06, 2022',
  status: 'Ongoing',
  score: 7.95,
  premiered: 'Summer 2022',
  duration: '24 min',
  views: 316267,
  otherNames: [ 'Isekai Ojisan', 'UNCLE FROM ANOTHER WORLD' ],
  totalEpisodes: 4,
  episodes: [
    {
      id: '155250',
      number: 1,
      title: 'I`m Finally Back from the Fantasy World of Granbahamal After 17 Long Years!',
      isFiller: false,
      url: 'https://9anime.id/ajax/server/list/155250?vrf=TYRythk8'
    },
    {
      id: '155251',
      number: 2,
      title: '"Guardian Heroes" Shoulda Been Number One!',
      isFiller: false,
      url: 'https://9anime.id/ajax/server/list/155251?vrf=TYRythk9'
    },
    {...}
    ...
  ]
}
fetchEpisodeSources
Parameters
Parameter	Type	Description
episodeId	string	takes episode id as a parameter. (episode id can be found in the anime info object)
In this example, we're getting the sources for the first episode of Overlord IV.

nineanime.fetchEpisodeSources("155250").then(data => {
  console.log(data);
})
returns a promise which resolves into an array of episode sources. (Promise<ISource>)
output:

lol jk. it doesnt work yet :).
fetchEpisodeServers
Parameters
Parameter	Type	Description
episodeId	string	take an episode id or url as a parameter. (episode id or episode url can be found in the anime info object)
nineanime.fetchEpisodeServers("155250").then(data => {
  console.log(data);
})
returns a promise which resolves into an array of episode servers. (Promise<IEpisodeServer[]>)
output:

[
  {
    name: 'vidstream',
    url: 'https://9anime.id/ajax/server/1080419?vrf=TYFtBg99w'
  },
  {
    name: 'mycloud',
    url: 'https://9anime.id/ajax/server/1080418?vrf=TYFtBg99g'
  },
  {
    name: 'filemoon',
    url: 'https://9anime.id/ajax/server/1219176?vrf=TYN2vR07%2BA'
  },
  {
    name: 'streamtape',
    url: 'https://9anime.id/ajax/server/1080423?vrf=TYFtBg%2BQ'
  },
  {
    name: 'mp4upload',
    url: 'https://9anime.id/ajax/server/1080422?vrf=TYFtBg%2BA'
  }
]






#Anify
##usage

const anify = new ANIME.Anify();
Methods
search
fetchAnimeInfo
fetchEpisodeSources
search
Note: This method is a subclass of the BaseParser class. meaning it is available across most categories.

Parameters
Parameter	Type	Description
query	string	query to search for. (In this case, We're searching for Overlord IV)
page	number	page number to search for.
perPage	number	number of results per page.
anify.search("Overlord IV").then(data => {
  console.log(data);
})
returns a promise which resolves into an array of anime. (Promise<ISearch<IAnimeResult[]>>)
output:

{
  currentPage: 1,
  hasNextPage: true,
  results: [
    {
      id: '133844',
      anilistId: 133844,
      malId: 48895,
      title: 'Overlord IV',
      image: 'https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx133844-E32FjKZ0XxEs.jpg',
      cover: 'https://s4.anilist.co/file/anilistcdn/media/anime/banner/133844-uIaUmh5aJX3M.jpg',
      releaseDate: 2022,
      description: 'The fourth season of <i>Overlord</i>.',
      genres: [ 'Action', 'Fantasy', 'Adventure' ],
      rating: 8,
      status: 'RELEASING',
      mappings: [
        {
          id: "/watch/overlord-iv.r77y",
          providerId: "9anime",
          providerType: "ANIME",
          similarity: 1
        },
        {
          id: "48895",
          providerId: "mal",
          providerType: "META",
          similarity: 1
        }
      ]
    },
    {...},
    ...
  ]
}
fetchAnimeInfo
Parameters
Parameter	Type	Description
id	string	takes anime id as a parameter. (anime id can be found in the anime search results or anime info object)
anify.fetchAnimeInfo("133844").then(data => {
  console.log(data);
})
returns a promise which resolves into an anime info object (including the episodes). (Promise<IAnimeInfo>)
output:

{
  id: '133844',
  anilistId: 133844,
  malId: 48895,
  title: 'Overlord IV',
  image: 'https://s4.anilist.co/file/anilistcdn/media/anime/cover/large/bx133844-E32FjKZ0XxEs.jpg',
  cover: 'https://s4.anilist.co/file/anilistcdn/media/anime/banner/133844-uIaUmh5aJX3M.jpg',
  releaseDate: 2022,
  description: 'The fourth season of <i>Overlord</i>.',
  genres: [ 'Action', 'Fantasy', 'Adventure' ],
  rating: 8,
  status: 'RELEASING',
  mappings: [
    {
      id: "/watch/overlord-iv.r77y",
      providerId: "9anime",
      providerType: "ANIME",
      similarity: 1
    },
    {
      id: "48895",
      providerId: "mal",
      providerType: "META",
      similarity: 1
    }
  ],
  episodes: [
   {
      id: '/overlord-iv-episode-6',
      number: 6,
      title: 'The Impending Crisis',
      isFiller: false,
      description: null,
      image: null,
      rating: null
    },
    {
      id: '/overlord-iv-episode-5',
      number: 5,
      title: 'In Pursuit of the Land of Dwarves',
      isFiller: false,
      description: null,
      image: null,
      rating: null
    },
    {...},
    ...
  ]
}
fetchEpisodeSources
Parameters
Parameter	Type	Description
episodeId	string	takes episode id as a parameter. (episode id can be found in the anime info object)
episodeNumber	number	takes episode number as a parameter. (episode number can be found in the anime info object)
id	string	takes anime ID as a parameter. (anime id can be found in the anime search results or anime info object)
In this example, we're getting the sources for the first episode of Overlord IV.

anify.fetchEpisodeSources("/overlord-iv-episode-5", 11, "133844").then(data => {
  console.log(data);
})
returns a promise which resolves into an array of episode sources. (Promise<ISource>)
output:

{
  headers: {
    Referer: 'https://goload.io/streaming.php?id=MTkwMzEy&title=Overlord+IV+Episode+6'
  },
  sources: [
    {
      url: 'https://www050.vipanicdn.net/streamhls/42f4d05521ce0b276e0d779493c16837/ep.11.1697533391.360.m3u8',
      quality: '360p'
    }
  ],
  subtitles: [],
  audio: [],
  intro: { start: 0, end: 0 },
  outro: { start: 0, end: 0 }
}
Make sure to check the headers property of the returned object. It contains the referer header, which is needed to bypass the 403 error and allow you to stream the video without any issues.


#Gogoanime

const gogoanime = new ANIME.Gogoanime();
Methods
search
fetchRecentEpisodes
fetchPopular
fetchGenreList
fetchGenreInfo
fetchTopAiring
fetchAnimeList
fetchAnimeInfo
fetchEpisodeSources
fetchEpisodeServers
fetchDirectDownloadLink
search
Note: This method is a subclass of the BaseParser class. meaning it is available across most categories.

Parameters
Parameter	Type	Description
query	string	query to search for. (In this case, We're searching for One Piece)
page (optional)	number	page number (default: 1)
gogoanime.search("One Piece").then(data => {
  console.log(data);
})
returns a promise which resolves into an array of anime. (Promise<ISearch<IAnimeResult[]>>)
output:

{
  currentPage: 1, // current page
  hasNextPage: true, // if there is a next page
  results: [
    {
      id: 'one-piece', // anime id
      title: 'One Piece',
      url: 'https://gogoanime.gg//category/one-piece', // anime url
      image: 'https://gogocdn.net/images/anime/One-piece.jpg',
      releaseDate: '1999',
      subOrDub: 'sub'
    },
    {
      id: 'toriko-dub',
      title: 'Toriko (Dub)',
      url: 'https://gogoanime.gg//category/toriko-dub',
      image: 'https://gogocdn.net/cover/toriko-dub.png',
      releaseDate: '2011',
      subOrDub: 'dub'
    },
    {...},
    ...
  ]
}
fetchRecentEpisodes
Parameters
Parameter	Type	Description
page (optional)	number	page number (default: 1)
type (optional)	string	type of anime (default: 1). 1: Japanese with subtitles, 2: english/dub with no subtitles, 3: chinese with english subtitles
gogoanime.fetchRecentEpisodes().then(data => {
  console.log(data);
})
output:

{
  currentPage: 1, // current page
  hasNextPage: true, // if there is a next page
  results: [
    {
      id: 'hellsing',
      episodeId: 'hellsing-episode-13',
      episodeNumber: 13,
      title: 'Hellsing',
      image: 'https://gogocdn.net/images/anime/H/hellsing.jpg',
      url: 'https://gogoanime.gg//hellsing-episode-13'
    },
    {...}
    ...
  ]
}
fetchPopular
return popular anime list.

Parameters
Parameter	Type	Description
page (optional)	number	page number (default: 1)
gogoanime.fetchPopular().then(data => {
  console.log(data);
})
output:

{
  currentPage: 1,
  hasNextPage: true,
  results: [
    {
      id: 'oshi-no-ko-2nd-season',
      title: '',
      releaseDate: '2024',
      image: 'https://gogocdn.net/cover/oshi-no-ko-2nd-season.png',
      url: 'https://anitaku.bz//category/oshi-no-ko-2nd-season'
    },
    {...}
    ...
  ]
}
fetchGenreList
return list of genre in gogoanime and its corresponding genre id

gogoanime.fetchGenreList().then(data => {
  console.log(data);
})
output:

[
  { id: 'action', title: 'Action' },
  {...},
  ...
]
fetchGenreInfo
return anime list based on genre.

Parameters
Parameter	Type	Description
genre	string	genre id from fetchGenreList
page (optional)	number	page number (default: 1)
gogoanime.fetchGenreInfo('action').then(data => {
  console.log(data);
})
output:

{
  currentPage: 1,
  hasNextPage: true,
  results: [
    {
      id: 'kingdom-5th-season-chinese-name',
      title: 'Kingdom 5th Season (Chinese Name)',
      image: 'https://gogocdn.net/cover/kingdom-5th-season-chinese-name.png',
      released: '2025',
      url: 'https://anitaku.bz///category/kingdom-5th-season-chinese-name'
    },
    {...}
    ...
  ]
}
fetchTopAiring
return top airing anime list.

Parameters
Parameter	Type	Description
page (optional)	number	page number (default: 1)
gogoanime.fetchTopAiring().then(data => {
  console.log(data);
})
output:

{
  currentPage: 1,
  hasNextPage: true,
  results: [
    {
      id: 'ore-dake-level-up-na-ken',
      title: 'Ore dake Level Up na Ken',
      image: 'https://gogocdn.net/cover/ore-dake-level-up-na-ken-1708917521.png',
      url: 'https://gogoanime3.co/category/ore-dake-level-up-na-ken',
      genres: [ 'Action', 'Adventure', 'Fantasy' ],
      episodeId: 'ore-dake-level-up-na-ken-episode-9',
      episodeNumber: 9
    }
    {...}
    ...
  ]
}
fetchAnimeList
return gogo anime list.

Parameters
Parameter	Type	Description
page (optional)	number	page number (default: 1)
gogoanime.fetchAnimeList().then(data => {
  console.log(data);
})
output:

{
  currentPage: 1,
  hasNextPage: true,
  results: [
    {
      id: 'hackgu-returner',
      title: '.Hack//G.U. Returner',
      image: 'https://gogocdn.net/images/anime/5745.jpg',
      url: 'https://gogoanime3.co/category/hackgu-returner',
      genres: [ 'Adventure', 'Drama', 'Game', 'Harem', 'Martial Arts', 'Seinen' ],
      releaseDate: 'Released: 2007'
    }
    {...}
    ...
  ]
}
fetchAnimeInfo
Parameters
Parameter	Type	Description
animeUrl	string	takes anime url or id as a parameter. (anime id or url can be found in the anime search results)
gogoanime.fetchAnimeInfo("one-piece").then(data => {
  console.log(data);
})
returns a promise which resolves into an anime info object (including the episodes). (Promise<IAnimeInfo>)
output:

{
  id: 'one-piece',
  title: 'One Piece',
  url: 'https://gogoanime.gg/category/one-piece',
  genres: [
    'Action',
    'Adventure',
    '...'
  ],
  totalEpisodes: 1022,
  image: 'https://gogocdn.net/images/anime/One-piece.jpg',
  releaseDate: '1999',
  description: 'One Piece is a story about  Monkey D. Luffy, who wants to become a sea-robber. In a world mystical...',
  subOrDub: 'sub',
  type: 'TV Series',
  status: 'Ongoing',
  otherName: '',
  episodes: [
    {
      id: 'one-piece-episode-1022',
      number: 1022,
      url: 'https://gogoanime.gg//one-piece-episode-1022'
    },
    {
      id: 'one-piece-episode-1021',
      number: 1021,
      url: 'https://gogoanime.gg//one-piece-episode-1021'
    },
    {...},
    ...
  ]
}
fetchEpisodeSources
Parameters
Parameter	Type	Description
episodeId	string	takes episode id as a parameter. (episode id can be found in the anime info object)
server (optional)	StreamingServers	takes server enum as a parameter. default: StreamingServers.GogoCDN
gogoanime.fetchEpisodeSources("one-piece-episode-1022").then(data => {
  console.log(data);
})
returns a promise which resolves into an array of episode sources. (Promise<ISource>)
output:

{
  headers: {
    Referer: 'https://s3taku.com/embedplus?id=MjI4Mzg0&token=ebbMjlakYIRbF9SnwN_2rA&expires=1722508079'
  },
  sources: [
    {
      url: 'https://www038.vipanicdn.net/streamhls/566ba3e573da6e2214d28058f348fd46/ep.4.1721934198.360.m3u8',
      isM3U8: true,
      quality: '360p'
    },
    {
      url: 'https://www038.vipanicdn.net/streamhls/566ba3e573da6e2214d28058f348fd46/ep.4.1721934198.480.m3u8',
      isM3U8: true,
      quality: '480p'
    },
    {
      url: 'https://www038.vipanicdn.net/streamhls/566ba3e573da6e2214d28058f348fd46/ep.4.1721934198.720.m3u8',
      isM3U8: true,
      quality: '720p'
    },
    {
      url: 'https://www038.vipanicdn.net/streamhls/566ba3e573da6e2214d28058f348fd46/ep.4.1721934198.1080.m3u8',
      isM3U8: true,
      quality: '1080p'
    },
    {
      url: 'https://www038.vipanicdn.net/streamhls/566ba3e573da6e2214d28058f348fd46/ep.4.1721934198.m3u8',
      isM3U8: true,
      quality: 'default'
    },
    {
      url: 'https://www038.anicdnstream.info/videos/hls/nCk9FsoqnNmN3l1m8bCdcg/1722515281/228384/566ba3e573da6e2214d28058f348fd46/ep.4.1721934198.m3u8',
      isM3U8: true,
      quality: 'backup'
    }
  ],
  download: 'https://s3taku.com/download?id=MjI4Mzg0&typesub=Gogoanime-SUB&title=Hazurewaku+no+%22Joutai+Ijou+Skill%22+de+Saikyou+ni+Natta+Ore+ga+Subete+wo+Juurin+suru+made+Episode+4'
}
fetchEpisodeServers
Parameters
Parameter	Type	Description
episodeId	string	take an episode id or url as a parameter. (episode id or episode url can be found in the anime info object)
gogoanime.fetchEpisodeServers("one-piece-episode-1022").then(data => {
  console.log(data);
})
returns a promise which resolves into an array of episode servers. (Promise<IEpisodeServer[]>)
output:

[
  {
    name: 'Vidstreaming',
    url: 'https://s3taku.com/abpl1245?id=MjI4Mzg0&title=Hazurewaku+no+%22Joutai+Ijou+Skill%22+de+Saikyou+ni+Natta+Ore+ga+Subete+wo+Juurin+suru+made+Episode+4'
  },
  {
    name: 'Gogo server',
    url: 'https://s3taku.com/embedplus?id=MjI4Mzg0&token=mVz9w3TEpFrufILsiUq_Rw&expires=1722508210'
  },
  { name: 'Streamwish', url: 'https://awish.pro/e/tx8n3caofulp' },
  {
    name: 'Mp4Upload',
    url: 'https://www.mp4upload.com/embed-rnp7cpglaqjc.html'
  },
  { name: 'Doodstream', url: 'https://dood.wf/e/dfx1530xo3yr' },
  { name: 'Vidhide', url: 'https://alions.pro/e/clqkhvh1y0zm' }
]
fetchDirectDownloadLink
Fetch direct download link of an episode from an episode's download link

Parameters
Parameter	Type	Description
downloadUrl	string	takes episode's download link url. (can be found in the fetchEpisodeSources object)
captchaToken (optional)	string	takes gogoanime recaptcha token(can be get via scanning network tools on download link). only for advanced users
gogoanime.fetchDirectDownloadLink("https://s3taku.com/download?id=MjI4Mzg0&typesub=Gogoanime-SUB&title=Hazurewaku+no+%22Joutai+Ijou+Skill%22+de+Saikyou+ni+Natta+Ore+ga+Subete+wo+Juurin+suru+made+Episode+4").then(data => {
  console.log(data);
})
output:

[
  {
    source: 'Download\n                        (360P - mp4)',
    link: 'https://gredirect.info/download.php?url=aHR0cHM6LyURASDGHUSRFSJGYfdsffsderFStewthsfSFtrfteAdeqwrwedffryretgsdFrsftrsvfsfsrsdf9wd3l4aXltZWx1LmFuZjU5OC5jb20vdXNlcjEzNDIvMmZiY2U2YjEzYmQ5ZjBkYzk5N2ZjOTk1MWIwZTQzYzcvRVAuNC52MS4xNzIxOTMzNzA0LjM2MHAubXA0P3Rva2VuPTM5SDcxejF4ck41c1JjTU5mTkxtdkEmZXhwaXJlcz0xNzIyNTE1ODUwJmlkPTIyODM4NA=='
  },
  {
    source: 'Download\n                        (480P - mp4)',
    link: 'https://gredirect.info/download.php?url=aHR0cHM6LyAawehyfcghysfdsDGDYdgdsfsdfwstdgdsgtert9URASDGHUSRFSJGYfdsffsderFStewthsfSFtrftesdfwd3l4aXltZWx1LmFuZjU5OC5jb20vdXNlcjEzNDIvMmZiY2U2YjEzYmQ5ZjBkYzk5N2ZjOTk1MWIwZTQzYzcvRVAuNC52MS4xNzIxOTMzNzA0LjQ4MHAubXA0P3Rva2VuPWhfWFlmRGlGV0VQRDNWMWJtQTRQRUEmZXhwaXJlcz0xNzIyNTE1ODUwJmlkPTIyODM4NA=='
  },
  {
    source: 'Download\n                        (720P - mp4)',
    link: 'https://gredirect.info/download.php?url=aHR0cHM6LyAawehyfcghysfdsDGDYdgdsfsdfwstdgdsgtert9AdeqwrwedffryretgsdFrsftrsvfsfsrwd3l4aXltZWx1LmFuZjU5OC5jb20vdXNlcjEzNDIvMmZiY2U2YjEzYmQ5ZjBkYzk5N2ZjOTk1MWIwZTQzYzcvRVAuNC52MS4xNzIxOTMzNzA0LjcyMHAubXA0P3Rva2VuPTIwX0doYVQwRFZSWFRRMHFkR1FMQlEmZXhwaXJlcz0xNzIyNTE1ODUwJmlkPTIyODM4NA=='
  },
  {
    source: 'Download\n                        (1080P - mp4)',
    link: 'https://gredirect.info/download.php?url=aHR0cHM6LyAdrefsdsdfwerFrefdsfrersfdsrfer363435349AdeqwrwedffryretgsdFrsftrsvfsfsrwd3l4aXltZWx1LmFuZjU5OC5jb20vdXNlcjEzNDIvMmZiY2U2YjEzYmQ5ZjBkYzk5N2ZjOTk1MWIwZTQzYzcvRVAuNC52MS4xNzIxOTMzNzA0LjEwODBwLm1wND90b2tlbj1CamFfQjNCUlFCSkt2azhGS05HeEJnJmV4cGlyZXM9MTcyMjUxNTg1MCZpZD0yMjgzODQ='
  }
]


#Zoro
const zoro = new ANIME.Zoro();
Methods
search
fetchAnimeInfo
fetchEpisodeSources
fetchTopAiring
fetchMostPopular
fetchMostFavorite
fetchLatestCompleted
fetchRecentlyUpdated
fetchRecentlyAdded
fetchTopUpcoming
fetchSchedule
fetchStudio
fetchSpotlight
[fetchSearchSuggestions] (#fetchSearchSuggestions)
search
Note: This method is a subclass of the BaseParser class. meaning it is available across most categories.

Parameters
Parameter	Type	Description
query	string	query to search for. (In this case, We're searching for Spy x Family)
zoro.search("spy x family").then(data => {
  console.log(data);
})
returns a promise which resolves into an array of anime. (Promise<ISearch<IAnimeResult[]>>)
output:

{
  currentPage: 1,
  hasNextPage: true,
  totalPages: 3,
  results: [
    {
      id: 'spy-x-family-17977',
      title: 'Spy x Family',                           url: 'https://aniwatch.to/spy-x-family-17977?ref=search',
      image: 'https://img.flawlessfiles.com/_r/300x400/100/88/bd/88bd17534dc4884f23027035d23d74e5/88bd17534dc4884f23027035d23d74e5.jpg',
      type: 'TV',
      duration: '24m',
      japaneseTitle: 'Spy x Family',
      nsfw: false,
      sub: 12,
      dub: 12,
      episodes: 12
    },
    {
      id: 'spy-x-family-part-2-18152',                title: 'Spy x Family, Part 2',
      url: 'https://aniwatch.to/spy-x-family-part-2-18152?ref=search',
      image: 'https://img.flawlessfiles.com/_r/300x400/100/53/d2/53d283223e562b22a14023d8dc1e934d/53d283223e562b22a14023d8dc1e934d.jpg',
      type: 'TV',
      duration: '23m',                                 japaneseTitle: 'Spy x Family Part 2',
      nsfw: false,
      sub: 13,
      dub: 13,
      episodes: 13
    },
    {...}
    ...
  ]
}
fetchAnimeInfo
Parameters
Parameter	Type	Description
id	string	takes anime id as a parameter. (anime id can be found in the anime search results or anime info object)
zoro.fetchAnimeInfo("overlord-iv-18075").then(data => {
  console.log(data);
})
returns a promise which resolves into an anime info object (including the episodes and optionally MAL and Anilist ID ). (Promise<IAnimeInfo>)
output:

{
  id: 'overlord-iv-18075',
  title: 'Overlord IV',
  malID: 48895,
  alID: 133844,
  image: 'https://img.zorores.com/_r/300x400/100/ef/1d/ef1d1028cf6c177587805651b78282a6/ef1d1028cf6c177587805651b78282a6.jpg',
  description: 'Fourth season of Overlord',
  type: 'TV',
  url: 'https://zoro.to/overlord-iv-18075',
  totalEpisodes: 3,
  episodes: [
    {
      id: 'overlord-iv-18075$episode$92599',
      number: 1,
      title: 'Sorcerous Nation of Ainz Ooal Gown',
      isFiller: false,
      url: 'https://zoro.to/watch/overlord-iv-18075?ep=92599'
    },
    {
      id: 'overlord-iv-18075$episode$92769',
      number: 2,
      title: 'Re-Estize Kingdom',
      isFiller: false,
      url: 'https://zoro.to/watch/overlord-iv-18075?ep=92769'
    },
  ]
}
fetchEpisodeSources
Parameters
Parameter	Type	Description
episodeId	string	takes episode id as a parameter. (episode id can be found in the anime info object)
In this example, we're getting the sources for the first episode of Overlord IV.

zoro.fetchEpisodeSources("overlord-iv-18075$episode$92599").then(data => {
  console.log(data);
})
returns a promise which resolves into an array of episode sources. (Promise<ISource>)
output:

{
  headers: { Referer: 'https://rapid-cloud.ru/embed-6/hMN2fYuGi1E2?z=' },
  intro: {
    start: 0,
    end: 100
  }
  sources: [
    {
      url: 'https://c-an-ca3.betterstream.cc:2223/v2-hls-playback/584bca0a36f1cfe0153bc80d79d62f9171c193441d424b2804000153234bb744f6eb7197bd91842408660ab8516c67f5ad565acd0d18e9b565c6abf2b5c0e55879ca70bef239d78711bf0845ddb6005baf5a5e957a17efc7bb6f1b4f3a87fb3723cfc56a1330960ec99ce338d86d49211bc6e8c2830d50842034ed99335c654529d2b0ca1e19045357a6b01876ae12ea313473387cb8c5272b37c7ba8a2bbc3b185c0cc72517ee0237ce673914ac3e54/index-f1-v1-a1.m3u8',
      quality: '1080p',
      isM3U8: true
    },
    {
      url: 'https://c-an-ca3.betterstream.cc:2223/v2-hls-playback/584bca0a36f1cfe0153bc80d79d62f9171c193441d424b2804000153234bb744f6eb7197bd91842408660ab8516c67f5ad565acd0d18e9b565c6abf2b5c0e55879ca70bef239d78711bf0845ddb6005baf5a5e957a17efc7bb6f1b4f3a87fb3723cfc56a1330960ec99ce338d86d49211bc6e8c2830d50842034ed99335c654529d2b0ca1e19045357a6b01876ae12ea313473387cb8c5272b37c7ba8a2bbc3b185c0cc72517ee0237ce673914ac3e54/index-f2-v1-a1.m3u8',
      quality: '720p',
      isM3U8: true
    },
    {
      url: 'https://c-an-ca3.betterstream.cc:2223/v2-hls-playback/584bca0a36f1cfe0153bc80d79d62f9171c193441d424b2804000153234bb744f6eb7197bd91842408660ab8516c67f5ad565acd0d18e9b565c6abf2b5c0e55879ca70bef239d78711bf0845ddb6005baf5a5e957a17efc7bb6f1b4f3a87fb3723cfc56a1330960ec99ce338d86d49211bc6e8c2830d50842034ed99335c654529d2b0ca1e19045357a6b01876ae12ea313473387cb8c5272b37c7ba8a2bbc3b185c0cc72517ee0237ce673914ac3e54/index-f3-v1-a1.m3u8',
      quality: '360p',
      isM3U8: true
    }
  ],
  subtitles: [
    {
      url: 'https://cc.zorores.com/5f/b4/5fb4481163961694ef0dc661a1bf51d7/eng-2.vtt',
      lang: 'English'
    },
    {
      url: 'https://cc.zorores.com/5f/b4/5fb4481163961694ef0dc661a1bf51d7/por-3.vtt',
      lang: 'Portuguese - Portuguese(Brazil)'
    },
    {
      url: 'https://cc.zorores.com/5f/b4/5fb4481163961694ef0dc661a1bf51d7/rus-5.vtt',
      lang: 'Russian'
    },
    {
      url: 'https://cc.zorores.com/5f/b4/5fb4481163961694ef0dc661a1bf51d7/spa-4.vtt',
      lang: 'Spanish - Spanish(Latin_America)'
    },
    {
      url: 'https://preview.zorores.com/53/531eb74affebbec2613a6ba0883754f3/thumbnails/sprite.vtt',
      lang: 'Default (maybe)'
    }
  ]
}
fetchTopAiring
Parameters
Parameter	Type	Description
page (optional)	number	page number (default 1)
zoro.fetchTopAiring().then(data => {
  console.log(data);
})
returns a promise which resolves into an array of anime. (Promise<ISearch<IAnimeResult[]>>)
output:

{                                                        currentPage: 1,
  hasNextPage: true,
  totalPages: 9,
  results: [
    {
      id: 'one-piece-100',
      title: 'One Piece',
      url: 'https://aniwatch.to/one-piece-100',
      image: 'https://img.flawlessfiles.com/_r/300x400/100/54/90/5490cb32786d4f7fef0f40d7266df532/5490cb32786d4f7fef0f40d7266df532.jpg',
      type: 'TV',
      duration: '24m',
      japaneseTitle: 'One Piece',
      nsfw: false,
      sub: 1089,
      dub: 1048,
      episodes: 0
    },
    {
      id: 'attack-on-titan-the-final-season-part-3-1839',
      title: 'Attack on Titan: The Final Season Part 3',
      url: 'https://aniwatch.to/attack-on-titan-the-final-season-part-3-18329',
      image: 'https://img.flawlessfiles.com/_r/300x400/100/54/d3/54d3f59bcc7caf1539c701eb0a064ec9/54d3f59bcc7caf1539c701eb0a064ec9.png',
      type: 'TV',
      duration: '61m',
      japaneseTitle: 'Shingeki no Kyojin: The Final Season - Kanketsu-hen',
      nsfw: true,
      sub: 2,
      dub: 2,
      episodes: 0
    },
    {...}
    ...
  ]
}
fetchMostPopular
Parameters
Parameter	Type	Description
page (optional)	number	page number (default 1)
zoro.fetchMostPopular().then(data => {
  console.log(data);
})
returns a promise which resolves into an array of anime. (Promise<ISearch<IAnimeResult[]>>)
output:

{                                                        currentPage: 1,
  hasNextPage: true,
  totalPages: 50,
  results: [
    {
      id: 'one-piece-100',
      title: 'One Piece',
      url: 'https://aniwatch.to/one-piece-100',
      image: 'https://img.flawlessfiles.com/_r/300x400/100/54/90/5490cb32786d4f7fef0f40d7266df532/5490cb32786d4f7fef0f40d7266df532.jpg',
      type: 'TV',
      duration: '24m',
      japaneseTitle: 'One Piece',
      nsfw: false,
      sub: 1089,
      dub: 1048,
      episodes: 0
    },
    {
      id: 'naruto-shippuden-355',
      title: 'Naruto: Shippuden',
      url: 'https://aniwatch.to/naruto-shippuden-355',
      image: 'https://img.flawlessfiles.com/_r/300x400/100/9c/bc/9cbcf87f54194742e7686119089478f8/9cbcf87f54194742e7686119089478f8.jpg',
      type: 'TV',
      duration: '23m',
      japaneseTitle: 'Naruto: Shippuuden',
      nsfw: false,
      sub: 500,
      dub: 500,
      episodes: 500
    },
    {...}
    ...
  ]
}
fetchMostFavorite
Parameters
Parameter	Type	Description
page (optional)	number	page number (default 1)
zoro.fetchMostFavorite().then(data => {
  console.log(data);
})
returns a promise which resolves into an array of anime. (Promise<ISearch<IAnimeResult[]>>)
output:

{
  currentPage: 1,
  hasNextPage: true,
  totalPages: 166,
  results: [
    {
      id: 'one-piece-100',
      title: 'One Piece',
      url: 'https://aniwatch.to/one-piece-100',
      image: 'https://img.flawlessfiles.com/_r/300x400/100/54/90/5490cb32786d4f7fef0f40d7266df532/5490cb32786d4f7fef0f40d7266df532.jpg',
      type: 'TV',
      duration: '24m',
      japaneseTitle: 'One Piece',
      nsfw: false,
      sub: 1089,
      dub: 1048,
      episodes: 0
    },
    {
      id: 'chainsaw-man-17406',
      title: 'Chainsaw Man',
      url: 'https://aniwatch.to/chainsaw-man-17406',
      image: 'https://img.flawlessfiles.com/_r/300x400/100/b3/da/b3da1326e07269ddd8d73475c5dabf2c/b3da1326e07269ddd8d73475c5dabf2c.jpg',
      type: 'TV',
      duration: '24m',
      japaneseTitle: 'Chainsaw Man',
      nsfw: true,
      sub: 12,
      dub: 12,
      episodes: 12
    },
    {...}
    ...
  ]
}
fetchLatestCompleted
Parameters
Parameter	Type	Description
page (optional)	number	page number (default 1)
zoro.fetchLatestCompleted().then(data => {
  console.log(data);
})
returns a promise which resolves into an array of anime. (Promise<ISearch<IAnimeResult[]>>)
output:

{
  currentPage: 1,
  hasNextPage: true,
  totalPages: 162,
  results: [
    {
      id: 'love-flops-18173',
      title: 'Love Flops',
      url: 'https://aniwatch.to/love-flops-18173',
      image: 'https://img.flawlessfiles.com/_r/300x400/100/8c/08/8c08b4fd12e27ac4e1dc4e72af8e9568/8c08b4fd12e27ac4e1dc4e72af8e9568.jpg',
      type: 'TV',
      duration: '24m',
      japaneseTitle: 'Renai Flops',
      nsfw: true,
      sub: 12,
      dub: 7,
      episodes: 12
    },
    {
      id: 'nurarihyon-no-mago-gekitou-dai-futsal-taikai-nuragumi-w-cup-5796',
      title: 'Nurarihyon no Mago: Gekitou Dai Futsal Taikai! Nuragumi W Cup!!',
      url: 'https://aniwatch.to/nurarihyon-no-mago-gekitou-dai-futsal-taikai-nuragumi-w-cup-5796',
      image: 'https://img.flawlessfiles.com/_r/300x400/100/bd/72/bd722d8e64272fb484a7f48e75eb9716/bd722d8e64272fb484a7f48e75eb9716.jpg',
      type: 'Special',
      duration: '13m',
      japaneseTitle: 'Nurarihyon no Mago: Gekitou Dai Futsal Taikai! Nuragumi W Cup!!',
      nsfw: false,
      sub: 1,
      dub: 0,
      episodes: 0
    },
    {...}
    ...
  ]
}
fetchRecentlyUpdated
Parameters
Parameter	Type	Description
page (optional)	number	page number (default 1)
zoro.fetchRecentlyUpdated().then(data => {
  console.log(data);
})
returns a promise which resolves into an array of anime. (Promise<ISearch<IAnimeResult[]>>)
output:

{
  currentPage: 1,
  hasNextPage: true,
  totalPages: 166,
  results: [
    {
      id: 'pokemon-horizons-the-series-18397',
      title: 'Pokémon Horizons: The Series',
      url: 'https://aniwatch.to/pokemon-horizons-the-series-18397',
      image: 'https://img.flawlessfiles.com/_r/300x400/100/4b/14/4b145f650126e400b69e783e3d6cdd2a/4b145f650126e400b69e783e3d6cdd2a.jpg',
      type: 'TV',
      duration: '24m',
      japaneseTitle: 'Pokemon (2023)',
      nsfw: false,
      sub: 35,
      dub: 0,
      episodes: 0
    },
    {
      id: 'bang-brave-bang-bravern-18733',
      title: 'Bang Brave Bang Bravern',
      url: 'https://aniwatch.to/bang-brave-bang-bravern-18733',
      image: 'https://img.flawlessfiles.com/_r/300x400/100/ad/1d/ad1d79d4c929278f23b91f2e787e5a50/ad1d79d4c929278f23b91f2e787e5a50.jpg',
      type: 'TV',
      duration: '25m',
      japaneseTitle: 'Yuuki Bakuhatsu Bang Bravern',
      nsfw: false,
      sub: 1,
      dub: 0,
      episodes: 0
    },
    {...}
    ...
  ]
}
fetchRecentlyAdded
Parameters
Parameter	Type	Description
page (optional)	number	page number (default 1)
zoro.fetchRecentlyAdded().then(data => {
  console.log(data);
})
returns a promise which resolves into an array of anime. (Promise<ISearch<IAnimeResult[]>>)
output:

{
  currentPage: 1,
  hasNextPage: true,
  totalPages: 162,
  results: [
    {
      id: 'love-flops-18173',
      title: 'Love Flops',
      url: 'https://aniwatch.to/love-flops-18173',
      image: 'https://img.flawlessfiles.com/_r/300x400/100/8c/08/8c08b4fd12e27ac4e1dc4e72af8e9568/8c08b4fd12e27ac4e1dc4e72af8e9568.jpg',
      type: 'TV',
      duration: '24m',
      japaneseTitle: 'Renai Flops',
      nsfw: true,
      sub: 12,
      dub: 7,
      episodes: 12
    },
    {
      id: 'nurarihyon-no-mago-gekitou-dai-futsal-taikai-nuragumi-w-cup-5796',
      title: 'Nurarihyon no Mago: Gekitou Dai Futsal Taikai! Nuragumi W Cup!!',
      url: 'https://aniwatch.to/nurarihyon-no-mago-gekitou-dai-futsal-taikai-nuragumi-w-cup-5796',
      image: 'https://img.flawlessfiles.com/_r/300x400/100/bd/72/bd722d8e64272fb484a7f48e75eb9716/bd722d8e64272fb484a7f48e75eb9716.jpg',
      type: 'Special',
      duration: '13m',
      japaneseTitle: 'Nurarihyon no Mago: Gekitou Dai Futsal Taikai! Nuragumi W Cup!!',
      nsfw: false,
      sub: 1,
      dub: 0,
      episodes: 0
    },
    {...}
    ...
  ]
}
fetchTopUpcoming
Parameters
Parameter	Type	Description
page (optional)	number	page number (default 1)
zoro.fetchTopUpcoming().then(data => {
  console.log(data);
})
returns a promise which resolves into an array of anime. (Promise<ISearch<IAnimeResult[]>>)
output:

{
  currentPage: 1,
  hasNextPage: true,
  totalPages: 6,
  results: [
    {
      id: 'bucchigiri-18781',
      title: 'Bucchigiri?!',
      url: 'https://aniwatch.to/bucchigiri-18781',
      image: 'https://img.flawlessfiles.com/_r/300x400/100/72/bf/72bfde46c44a200ff11d82049005d3c8/72bfde46c44a200ff11d82049005d3c8.jpg',
      type: 'TV',
      duration: 'Jan 13, 2024',
      japaneseTitle: 'Bucchigiri?!',
      nsfw: false,
      sub: 0,
      dub: 0,
      episodes: 0
    },
    {
      id: 'dead-dead-demons-dededede-destruction-18925',
      title: 'Dead Dead Demons Dededede Destruction',
      url: 'https://aniwatch.to/dead-dead-demons-dededede-destruction-18925',
      image: 'https://img.flawlessfiles.com/_r/300x400/100/8d/11/8d112670f41684d97015004293a087dc/8d112670f41684d97015004293a087dc.jpg',
      type: 'Movie',
      duration: 'Mar 22, 2024',
      japaneseTitle: 'Dead Dead Demons Dededede Destruction',
      nsfw: false,
      sub: 0,
      dub: 0,
      episodes: 0
    },
    {...}
    ...
  ]
}
fetchSchedule
Parameters
Parameter	Type	Description
date	string	Date in format 'YYYY-MM-DD'. Defaults to the current date.
zoro.fetchSchedule('2024-03-11').then(data => {
  console.log(data);
})
returns a promise which resolves into an array of anime. (Promise<ISearch<IAnimeResult[]>>)
output:

{
  results: [
    {
      id: 'high-card-season-2-18820',
      title: 'High Card Season 2',
      japaneseTitle: 'High Card Season 2',
      url: 'https://hianime.to/high-card-season-2-18820',
      airingEpisode: 'Episode 10',
      airingTime: '07:30'
    },
    {
      id: 'tsukimichi-moonlit-fantasy-season-2-18877',
      title: 'Tsukimichi -Moonlit Fantasy- Season 2',
      japaneseTitle: 'Tsuki ga Michibiku Isekai Douchuu 2nd Season',
      url: 'https://hianime.to/tsukimichi-moonlit-fantasy-season-2-18877',
      airingEpisode: 'Episode 10',
      airingTime: '09:00'
    },
    {
      id: 'the-foolish-angel-dances-with-the-devil-18832',
      title: 'The Foolish Angel Dances with the Devil',
      japaneseTitle: 'Oroka na Tenshi wa Akuma to Odoru',
      url: 'https://hianime.to/the-foolish-angel-dances-with-the-devil-18832',
      airingEpisode: 'Episode 10',
      airingTime: '10:30'
    },
    {
      id: 'synduality-noir-part-2-18754',
      title: 'Synduality: Noir Part 2',
      japaneseTitle: 'Synduality: Noir Part 2',
      url: 'https://hianime.to/synduality-noir-part-2-18754',
      airingEpisode: 'Episode 10',
      airingTime: '10:30'
    },
    {
      id: 'tis-time-for-torture-princess-18778',
      title: 'Tis Time for "Torture," Princess',
      japaneseTitle: 'Himesama "Goumon" no Jikan desu',
      url: 'https://hianime.to/tis-time-for-torture-princess-18778',
      airingEpisode: 'Episode 10',
      airingTime: '11:30'
    },
    {
      id: 'hokkaido-gals-are-super-adorable-18853',
      title: 'Hokkaido Gals Are Super Adorable!',
      japaneseTitle: 'Dosanko Gal wa Namara Menkoi',
      url: 'https://hianime.to/hokkaido-gals-are-super-adorable-18853',
      airingEpisode: 'Episode 10',
      airingTime: '11:45'
    }
  ]
}
fetchStudio
Parameters
Parameter	Type	Description
studio	string	studio id, e.g. "toei-animation"
page (optional)	number	page number (default 1)
zoro.fetchStudio('toei-animation').then(data => {
  console.log(data);
})
returns a promise which resolves into an array of anime. (Promise<ISearch<IAnimeResult[]>>)
output:

{
  currentPage: 1,
  hasNextPage: true,
  totalPages: 9,
  results: [
    {
      id: 'one-piece-100',
      title: 'One Piece',
      url: 'https://aniwatch.to/one-piece-100',
      image: 'https://img.flawlessfiles.com/_r/300x400/100/54/90/5490cb32786d4f7fef0f40d7266df532/5490cb32786d4f7fef0f40d7266df532.jpg',
      type: 'TV',
      duration: '24m',
      japaneseTitle: 'One Piece',
      nsfw: false,
      sub: 1089,
      dub: 1048,
      episodes: 0
    },
    {
      id: 'attack-on-titan-the-final-season-part-3-1839',
      title: 'Attack on Titan: The Final Season Part 3',
      url: 'https://aniwatch.to/attack-on-titan-the-final-season-part-3-18329',
      image: 'https://img.flawlessfiles.com/_r/300x400/100/54/d3/54d3f59bcc7caf1539c701eb0a064ec9/54d3f59bcc7caf1539c701eb0a064ec9.png',
      type: 'TV',
      duration: '61m',
      japaneseTitle: 'Shingeki no Kyojin: The Final Season - Kanketsu-hen',
      nsfw: true,
      sub: 2,
      dub: 2,
      episodes: 0
    },
    {...}
    ...
  ]
}
fetchSpotlight
zoro.fetchSpotlight().then(data => {
  console.log(data);
})
returns a promise which resolves into an array of anime. (Promise<ISearch<IAnimeResult[]>>)
output:

{
  
  results: [
    {
      id: 'delicious-in-dungeon-18506',
      title: 'Delicious in Dungeon',
      japaneseTitle: 'Dungeon Meshi',
      banner: 'https://cdn.noitatnemucod.net/thumbnail/1366x768/100/50affe2ea9a02c36d5a7c0532c1b7ef9.jpeg',
      rank: 1,
      url: 'https://hianime.to/delicious-in-dungeon-18506',
      type: 'TV',
      duration: '23m',
      releaseDate: 'Jan 4, 2024',
      quality: 'HD',
      sub: 11,
      dub: 10,
      episodes: 0,
      description: "After the Golden Kingdom is sunk underground by an insane magician, its king emerges, promising all of his treasure to any who defeat the magician, before crumbling to dust. Guilds are spurred on by this promise, traversing the labyrinthine dungeon in search of the magician. Laios, the leader of one such guild, encounters a dragon that wipes out his party and devours his sister Falin. Despite having lost the entirety of their supplies and belongings, Laios along with Marcille, an elven healer, and Chilchuck, a halfling thief, immediately reenter the dungeon, determined to save Falin.  Time being of the essence, Laios suggests the taboo of eating the monsters of the dungeon as a means of gathering supplies. Upon the preparation of their first meal in the dungeon, they are stopped by an onlooking dwarf named Senshi. An enthusiast of monster cooking, he helps them prepare their monster ingredients for safe consumption. After learning of Laios' circumstances, Senshi expresses his desire to cook a dragon and joins their guild, thus beginning their food-filled foray into the dungeon together."
    },
    {...}
    ...
  ]
}
fetchSearchSuggestions
zoro.fetchSearchSuggestions("One Piece").then(data => {
  console.log(data);
})
returns a promise which resolves into an array of anime. (Promise<ISearch<IAnimeResult[]>>)
output:

{
  results: [
    {
      image: 'https://cdn.noitatnemucod.net/thumbnail/300x400/100/ff736656ba002e0dd51363c3d889d9ff.jpg',
      id: 'one-piece-movie-1-3096',
      title: 'One Piece Movie 1',
      japaneseTitle: 'One Piece Movie 1',
      aliasTitle: 'One Piece Movie 1',
      releaseDate: 'Mar 4, 2000',
      type: 'Movie',
      duration: '50m',
      url: 'https://hianime.to/one-piece-movie-1-3096'
    },
    {
      image: 'https://cdn.noitatnemucod.net/thumbnail/300x400/100/bcd84731a3eda4f4a306250769675065.jpg',
      id: 'one-piece-100',
      title: 'One Piece',
      japaneseTitle: 'One Piece',
      aliasTitle: 'One Piece',
      releaseDate: 'Oct 20, 1999',
      type: 'TV',
      duration: '24m',
      url: 'https://hianime.to/one-piece-100'
    },
    {
      image: 'https://cdn.noitatnemucod.net/thumbnail/300x400/100/a1e98b07e290cd9653b41a895342a377.jpg',
      id: 'one-piece-film-red-18236',
      title: 'One Piece Film: Red',
      japaneseTitle: 'One Piece Film: Red',
      aliasTitle: 'One Piece Film: Red',
      releaseDate: 'Aug 6, 2022',
      type: 'Movie',
      duration: '1h 55m',
      url: 'https://hianime.to/one-piece-film-red-18236'
    },
    {
      image: 'https://cdn.noitatnemucod.net/thumbnail/300x400/100/7156c377053c230cc42b66bbf7260325.jpg',
      id: 'one-piece-the-movie-13-film-gold-550',
      title: 'One Piece: The Movie 13 - Film: Gold',
      japaneseTitle: 'One Piece Film: Gold',
      aliasTitle: 'One Piece Film: Gold',
      releaseDate: 'Jul 23, 2016',
      type: 'Movie',
      duration: '1h 30m',
      url: 'https://hianime.to/one-piece-the-movie-13-film-gold-550'
    },
    {
      image: 'https://cdn.noitatnemucod.net/thumbnail/300x400/100/14f2be76eee4a497ad81a5039425ff06.jpg',
      id: 'one-room-third-season-6959',
      title: 'One Room Third Season',
      japaneseTitle: 'One Room Third Season',
      aliasTitle: 'One Room Third Season',
      releaseDate: 'Oct 6, 2020',
      type: 'TV',
      duration: '4m',
      url: 'https://hianime.to/one-room-third-season-6959'
    }
  ]
}
fetchContinueWatching
Parameters
Parameter	Type	Description
connectSid	string	The session ID obtained from the website cookies
zoro.fetchContinueWatching("{user_connect_sid}").then(data => {
  console.log(data);
})
returns a promise which resolves into an array of episodes. (Promise<IAnimeEpisode[]>)
output:

[
  {
    id: 'dragon-ball-super-broly-387$episode$58063',
    title: 'Dragon Ball Super: Broly',
    number: 1,
    duration: '1:39:43',
    watchedTime: '00:01',
    url: 'http://hianime.to/watch/dragon-ball-super-broly-387?ep=58063',
    image: 'https://cdn.noitatnemucod.net/thumbnail/300x400/100/6b138786ca53a86413d89806cb6836dd.jpg',
    japaneseTitle: 'Dragon Ball Super Movie: Broly',
    nsfw: false,
    sub: 1,
    dub: 1,
    episodes: 0
  },
  {...},
  ...
]
Make sure to check the headers property of the returned object. It contains the referer header, which might be needed to bypass the 403 error and allow you to stream the video without any issues.

#BYpass CORS origin error Use Proxy

Proxy URL=http://goodproxy.chintanr21.workers.dev/

Example: http://goodproxy.chintanr21.workers.dev/?url=http://walterebert.com/playground/video/hls/sintel-trailer.m3u8


